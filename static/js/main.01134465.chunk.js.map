{"version":3,"sources":["serviceWorker.ts","api/types.ts","store/todolist-reducer/todolists-reducer.ts","store/app-reducer/app-reducer.ts","api/api-config.ts","api/todolists-api.ts","store/tasks-reducer/tasks-reducer.ts","store/auth-reducer/auth-reducer.ts","store/store.ts","components/AddItemForm/styles.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","containers/TodolistsList/Todolist/components/Task/styles.ts","containers/TodolistsList/Todolist/components/Task/Task.tsx","containers/TodolistsList/Todolist/styles.ts","containers/TodolistsList/Todolist/Todolist.tsx","store/auth-reducer/selectors.ts","store/tasks-reducer/selectors.ts","store/todolist-reducer/selectors.ts","utils/theme.ts","containers/TodolistsList/styles.ts","utils/error-utils.ts","store/tasks-reducer/thunks.ts","containers/TodolistsList/TodolistsList.tsx","store/todolist-reducer/thunks.ts","store/app-reducer/selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","containers/Login/styles.ts","api/login-api.ts","containers/Login/Login.tsx","store/auth-reducer/thunks.ts","app/styles.ts","components/Loader/Loader.tsx","containers/AppBar/styles.ts","containers/AppBar/AppBar.tsx","app/App.tsx","store/app-reducer/thunks.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","payload","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","title","changeTodolistFilterAC","changeTodolistEntityStatusAC","status","setTodolistsAC","_","todolists","map","todolistsReducer","reducer","actions","error","isInitialized","setAppStatusAC","setAppErrorAC","setAppInitializedAC","appReducer","apiConfig","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","put","todolistId","taskId","taskTitile","model","fetchTasksTC","createAsyncThunk","thunkAPI","dispatch","then","res","tasks","data","items","removeTaskAC","t","addTaskAC","task","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","isLoggedIn","setIsLoggedInAC","value","authReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Wrapper","styled","div","StyledTextField","TextField","AddItemForm","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","label","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","style","marginTop","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","Checkbox","checked","Completed","newIsDoneValue","New","newValue","Delete","Todolist","changeFilter","addTask","removeTodolist","changeTodolistTitle","useDispatch","tasksForTodolist","useEffect","thunk","key","paddingTop","Button","selectIsLoggedIn","selectTasks","selectTodolists","theme","colors","primary","breakpoints","phone","tablet","createMediaQuery","maxWidth","media","Object","keys","reduce","acc","css","Container","handleServerAppError","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","TodolistsList","useSelector","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolistTC","allTodolistTasks","to","selectIsInitialized","selectStatus","selectErrod","ErrorSnackbar","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","Alert","elevation","severity","Form","form","authAPI","p","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","emailError","errors","passwordError","Grid","container","justify","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","background","Content","LoaderWrapper","Loader","CircularProgress","StyledToolbar","Toolbar","AppBar","position","Typography","LinearProgress","App","path","render","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01134465.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\nexport type Todolist = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport type LoginParams = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n\nexport type GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: TaskType[];\n};\n","import { RequestStatusType } from \"../app-reducer/app-reducer\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Todolist } from \"../../api/types\";\n\nconst initialState: Array<TodolistDomainType> = [];\n\nconst slice = createSlice({\n  name: \"todolists\",\n  initialState: initialState,\n  reducers: {\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      if (index > -1) {\n        state.splice(index, 1);\n      }\n    },\n    addTodolistAC(state, action: PayloadAction<{ todolist: Todolist }>) {\n      state.unshift({\n        ...action.payload.todolist,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      });\n    },\n    changeTodolistTitleAC(\n      state,\n      action: PayloadAction<{ id: string; title: string }>\n    ) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      state[index].title = action.payload.title;\n    },\n    changeTodolistFilterAC(\n      state,\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>\n    ) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      state[index].filter = action.payload.filter;\n    },\n    changeTodolistEntityStatusAC(\n      state,\n      action: PayloadAction<{ id: string; status: RequestStatusType }>\n    ) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      state[index].entityStatus = action.payload.status;\n    },\n    setTodolistsAC(_, action: PayloadAction<{ todolists: Array<Todolist> }>) {\n      return action.payload.todolists.map((tl) => ({\n        ...tl,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    },\n  },\n});\n\nexport const todolistsReducer = slice.reducer;\n\nexport const {\n  removeTodolistAC,\n  addTodolistAC,\n  changeTodolistTitleAC,\n  changeTodolistFilterAC,\n  changeTodolistEntityStatusAC,\n  setTodolistsAC,\n} = slice.actions;\n\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = Todolist & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialState: InitialStateType = {\n  status: \"idle\",\n  error: null,\n  isInitialized: false,\n};\n\nconst slice = createSlice({\n  name: \"app\",\n  initialState: initialState,\n  reducers: {\n    setAppStatusAC(\n      state,\n      action: PayloadAction<{ status: RequestStatusType }>\n    ) {\n      state.status = action.payload.status;\n    },\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n      state.error = action.payload.error;\n    },\n    setAppInitializedAC(\n      state,\n      action: PayloadAction<{ isInitialized: boolean }>\n    ) {\n      state.isInitialized = action.payload.isInitialized;\n    },\n  },\n});\n\nexport const appReducer = slice.reducer;\n\nexport const { setAppErrorAC, setAppStatusAC, setAppInitializedAC } =\n  slice.actions;\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\nexport type InitialStateType = {\n  status: RequestStatusType;\n  error: string | null;\n  isInitialized: boolean;\n};\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\n","import axios from \"axios\";\n\nexport const apiConfig = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"e68751ec-99e4-4ba5-aeca-d3d2975884b0\",\n  },\n});\n","import { apiConfig } from \"./api-config\";\nimport {\n  GetTasksResponse,\n  ResponseType,\n  TaskType,\n  Todolist,\n  UpdateTaskModelType,\n} from \"./types\";\n\nexport const todolistsAPI = {\n  getTodolists() {\n    const promise = apiConfig.get<Todolist[]>(\"todo-lists\");\n    return promise;\n  },\n  createTodolist(title: string) {\n    const promise = apiConfig.post<ResponseType<{ item: Todolist }>>(\n      \"todo-lists\",\n      { title: title }\n    );\n    return promise;\n  },\n  deleteTodolist(id: string) {\n    const promise = apiConfig.delete<ResponseType>(`todo-lists/${id}`);\n    return promise;\n  },\n  updateTodolist(id: string, title: string) {\n    const promise = apiConfig.put<ResponseType>(`todo-lists/${id}`, {\n      title: title,\n    });\n    return promise;\n  },\n  getTasks(todolistId: string) {\n    return apiConfig.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return apiConfig.delete<ResponseType>(\n      `todo-lists/${todolistId}/tasks/${taskId}`\n    );\n  },\n  createTask(todolistId: string, taskTitile: string) {\n    return apiConfig.post<ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks`,\n      { title: taskTitile }\n    );\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return apiConfig.put<ResponseType<TaskType>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n","import {\n  addTodolistAC,\n  removeTodolistAC,\n  setTodolistsAC,\n} from \"../todolist-reducer/todolists-reducer\";\nimport { setAppStatusAC } from \"../app-reducer/app-reducer\";\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { todolistsAPI } from \"../../api/todolists-api\";\nimport { TaskPriorities, TaskStatuses, TaskType } from \"../../api/types\";\n\nconst initialState: TasksStateType = {};\n\nexport const fetchTasksTC = createAsyncThunk(\n  \"tasks/fetchTasksTC\",\n  (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({ status: \"loading\" }));\n\n    return todolistsAPI.getTasks(todolistId).then((res) => {\n      const tasks = res.data.items;\n      thunkAPI.dispatch(setAppStatusAC({ status: \"succeeded\" }));\n\n      return { tasks, todolistId };\n    });\n  }\n);\n\nconst slice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    removeTaskAC(\n      state,\n      action: PayloadAction<{ taskId: string; todolistId: string }>\n    ) {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex((t) => t.id === action.payload.taskId);\n      if (index > -1) tasks.splice(index, 1);\n    },\n    addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n      state[action.payload.task.todoListId].unshift(action.payload.task);\n    },\n    updateTaskAC(\n      state,\n      action: PayloadAction<{\n        taskId: string;\n        model: UpdateDomainTaskModelType;\n        todolistId: string;\n      }>\n    ) {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex((t) => t.id === action.payload.taskId);\n      if (index > -1)\n        tasks[index] = { ...tasks[index], ...action.payload.model };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addTodolistAC, (state, action) => {\n      state[action.payload.todolist.id] = [];\n    });\n    builder.addCase(removeTodolistAC, (state, action) => {\n      delete state[action.payload.id];\n    });\n    builder.addCase(setTodolistsAC, (state, action) => {\n      action.payload.todolists.forEach((tl: any) => {\n        state[tl.id] = [];\n      });\n    });\n    builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\n      state[action.payload.todolistId] = action.payload.tasks;\n    });\n  },\n});\n\nexport const tasksReducer = slice.reducer;\n\nexport const { removeTaskAC, addTaskAC, updateTaskAC } = slice.actions;\n\nexport type UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isLoggedIn: false,\n};\n\nconst slice = createSlice({\n  name: \"auth\",\n  initialState: initialState,\n  reducers: {\n    setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n      state.isLoggedIn = action.payload.value;\n    },\n  },\n});\n\nexport const authReducer = slice.reducer;\n\nexport const { setIsLoggedInAC } = slice.actions;\n","import { tasksReducer } from \"./tasks-reducer/tasks-reducer\";\nimport { todolistsReducer } from \"./todolist-reducer/todolists-reducer\";\nimport { combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { appReducer } from \"../store/app-reducer/app-reducer\";\nimport { authReducer } from \"./auth-reducer/auth-reducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().prepend(thunkMiddleware),\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n","import { TextField } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nexport const Wrapper = styled.div``;\n\nexport const StyledTextField = styled(TextField)`\n  & > div {\n    background: white;\n\n    & > fieldset {\n      border-radius: 6px;\n      border-color: #c7c9d9;\n    }\n  }\n`;\n","import React, { ChangeEvent, FC, KeyboardEvent, useState } from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\nimport { StyledTextField, Wrapper } from \"./styles\";\n\ntype AddItemFormProps = {\n  addItem: (title: string) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm: FC<AddItemFormProps> = ({\n  addItem,\n  disabled = false,\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const addItemHandler = () => {\n    if (title.trim() !== \"\") {\n      addItem(title);\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      addItemHandler();\n    }\n  };\n\n  return (\n    <Wrapper>\n      <StyledTextField\n        label=\"Title\"\n        variant=\"outlined\"\n        disabled={disabled}\n        error={!!error}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        helperText={error}\n      />\n      <IconButton\n        color=\"primary\"\n        style={{ marginTop: \"4px\" }}\n        disabled={disabled}\n        onClick={addItemHandler}\n      >\n        <AddBox />\n      </IconButton>\n    </Wrapper>\n  );\n};\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype EditableSpanProps = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport const EditableSpan: FC<EditableSpanProps> = ({ value, onChange }) => {\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(value);\n  };\n\n  const activateViewMode = () => {\n    setEditMode(false);\n    onChange(title);\n  };\n\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={changeTitle}\n      autoFocus\n      onBlur={activateViewMode}\n    />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{value}</span>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n","import React, { FC, ChangeEvent } from \"react\";\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport { EditableSpan } from \"../../../../../components/EditableSpan/EditableSpan\";\nimport { Delete } from \"@material-ui/icons\";\n\nimport { Wrapper } from \"./styles\";\nimport { TaskStatuses, TaskType } from \"../../../../../api/types\";\n\ntype TaskProps = {\n  task: TaskType;\n  todolistId: string;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (\n    taskId: string,\n    newTitle: string,\n    todolistId: string\n  ) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n};\n\nexport const Task: FC<TaskProps> = ({\n  task,\n  todolistId,\n  changeTaskStatus,\n  changeTaskTitle,\n  removeTask,\n}) => {\n  const { id, status, title } = task;\n\n  const onClickHandler = () => removeTask(id, todolistId);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    let newIsDoneValue = e.currentTarget.checked\n      ? TaskStatuses.Completed\n      : TaskStatuses.New;\n\n    changeTaskStatus(id, newIsDoneValue, todolistId);\n  };\n\n  const onTitleChangeHandler = (newValue: string) => {\n    changeTaskTitle(id, newValue, todolistId);\n  };\n\n  return (\n    <Wrapper>\n      <Checkbox\n        checked={status === TaskStatuses.Completed}\n        color=\"primary\"\n        onChange={onChangeHandler}\n      />\n\n      <EditableSpan value={title} onChange={onTitleChangeHandler} />\n      <IconButton onClick={onClickHandler}>\n        <Delete />\n      </IconButton>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  height: fit-content;\n  flex-shrink: 0;\n  border: 1px solid white;\n  border-radius: 8px;\n  background: white;\n  box-shadow: 0px 2px 8px 0px rgba(96, 97, 112, 0.06);\n  padding: 16px;\n`;\n","import React, { useEffect, FC } from \"react\";\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemForm\";\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport { Task } from \"./components/Task/Task\";\n\nimport {\n  FilterValuesType,\n  TodolistDomainType,\n} from \"../../../store/todolist-reducer/todolists-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchTasksTC } from \"../../../store/tasks-reducer/tasks-reducer\";\nimport { Wrapper } from \"./styles\";\nimport { TaskStatuses, TaskType } from \"../../../api/types\";\n\ntype TodolistProps = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\n  addTask: (title: string, todolistId: string) => void;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (\n    taskId: string,\n    newTitle: string,\n    todolistId: string\n  ) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n  removeTodolist: (id: string) => void;\n  changeTodolistTitle: (id: string, newTitle: string) => void;\n};\n\nexport const Todolist: FC<TodolistProps> = ({\n  todolist,\n  tasks,\n  changeFilter,\n  addTask,\n  changeTaskStatus,\n  changeTaskTitle,\n  removeTask,\n  removeTodolist,\n  changeTodolistTitle,\n}) => {\n  const dispatch = useDispatch();\n\n  const addNewTask = (title: string) => {\n    addTask(title, todolist.id);\n  };\n\n  const handleTodolistTitle = (title: string) => {\n    changeTodolistTitle(todolist.id, title);\n  };\n\n  const onAllClickHandler = () => changeFilter(\"all\", todolist.id);\n\n  const onActiveClickHandler = () => changeFilter(\"active\", todolist.id);\n\n  const onCompletedClickHandler = () => changeFilter(\"completed\", todolist.id);\n\n  let tasksForTodolist = tasks;\n\n  if (todolist.filter === \"active\") {\n    tasksForTodolist = tasks.filter((task) => task.status === TaskStatuses.New);\n  }\n\n  if (todolist.filter === \"completed\") {\n    tasksForTodolist = tasks.filter(\n      (task) => task.status === TaskStatuses.Completed\n    );\n  }\n\n  useEffect(() => {\n    const thunk = fetchTasksTC(todolist.id);\n    dispatch(thunk);\n  }, []);\n\n  return (\n    <Wrapper>\n      <h3>\n        <EditableSpan value={todolist.title} onChange={handleTodolistTitle} />\n        <IconButton\n          onClick={() => removeTodolist(todolist.id)}\n          disabled={todolist.entityStatus === \"loading\"}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm\n        addItem={addNewTask}\n        disabled={todolist.entityStatus === \"loading\"}\n      />\n      <div>\n        {tasksForTodolist.map((task) => (\n          <Task\n            key={task.id}\n            task={task}\n            todolistId={todolist.id}\n            removeTask={removeTask}\n            changeTaskTitle={changeTaskTitle}\n            changeTaskStatus={changeTaskStatus}\n          />\n        ))}\n      </div>\n      <div style={{ paddingTop: \"10px\" }}>\n        <Button\n          variant={todolist.filter === \"all\" ? \"outlined\" : \"text\"}\n          onClick={onAllClickHandler}\n          color={\"default\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={todolist.filter === \"active\" ? \"outlined\" : \"text\"}\n          onClick={onActiveClickHandler}\n          color={\"primary\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\n          onClick={onCompletedClickHandler}\n          color={\"secondary\"}\n        >\n          Completed\n        </Button>\n      </div>\n    </Wrapper>\n  );\n};\n","import { AppRootStateType } from \"../store\";\n\nexport const selectIsLoggedIn = (state: AppRootStateType) => {\n  return state.auth.isLoggedIn;\n};\n","import { AppRootStateType } from \"../store\";\n\nexport const selectTasks = (state: AppRootStateType) => {\n  return state.tasks;\n};\n","import { AppRootStateType } from \"../store\";\n\nexport const selectTodolists = (state: AppRootStateType) => {\n  return state.todolists;\n};\n","import { css } from \"styled-components\";\n\nexport const theme = {\n  colors: {\n    primary: \"#3498db\",\n  },\n  breakpoints: {\n    phone: 500,\n    tablet: 900,\n  },\n};\n\nconst createMediaQuery = (maxWidth: number) =>\n  `@media (max-width: ${maxWidth}px)`;\n\nexport const media = Object.keys(theme.breakpoints).reduce(\n  (acc, label) => ({\n    ...acc,\n    [label]: (...args: Parameters<typeof css>) => css`\n      ${createMediaQuery(\n        theme.breakpoints[label as keyof typeof theme.breakpoints]\n      )} {\n        ${css(...args)}\n      }\n    `,\n  }),\n  {} as Record<\n    keyof typeof theme.breakpoints,\n    (...args: Parameters<typeof css>) => ReturnType<typeof css>\n  >\n);\n","import styled from \"styled-components\";\nimport { media } from \"../../utils/theme\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-top: 40px;\n\n  ${media.phone`\n    flex-direction: column;\n  `}\n`;\n","import {\n  setAppErrorAC,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../store/app-reducer/app-reducer\";\nimport { ResponseType } from \"../api/types\";\nimport { Dispatch } from \"redux\";\n\nexport const handleServerAppError = <D>(\n  data: ResponseType<D>,\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC({ error: data.messages[0] }));\n  } else {\n    dispatch(setAppErrorAC({ error: \"Some error occurred\" }));\n  }\n  dispatch(setAppStatusAC({ status: \"failed\" }));\n};\n\nexport const handleServerNetworkError = (\n  error: { message: string },\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n) => {\n  dispatch(\n    setAppErrorAC({\n      error: error.message ? error.message : \"Some error occurred\",\n    })\n  );\n  dispatch(setAppStatusAC({ status: \"failed\" }));\n};\n","import { Dispatch } from \"redux\";\nimport { todolistsAPI } from \"../../api/todolists-api\";\nimport {\n  addTaskAC,\n  removeTaskAC,\n  UpdateDomainTaskModelType,\n  updateTaskAC,\n} from \"./tasks-reducer\";\nimport { setAppStatusAC } from \"../app-reducer/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { AppRootStateType } from \"../store\";\nimport { UpdateTaskModelType } from \"../../api/types\";\n\nexport const removeTaskTC =\n  (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\n    todolistsAPI.deleteTask(todolistId, taskId).then((res) => {\n      const action = removeTaskAC({ taskId: taskId, todolistId: todolistId });\n      dispatch(action);\n    });\n  };\n\nexport const addTaskTC =\n  (title: string, todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: \"loading\" }));\n    todolistsAPI\n      .createTask(todolistId, title)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          const task = res.data.data.item;\n          const action = addTaskAC({ task: task });\n          dispatch(action);\n          dispatch(setAppStatusAC({ status: \"succeeded\" }));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((error) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\nexport const updateTaskTC =\n  (\n    taskId: string,\n    domainModel: UpdateDomainTaskModelType,\n    todolistId: string\n  ) =>\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    const state = getState();\n    const task = state.tasks[todolistId].find((t) => t.id === taskId);\n    if (!task) {\n      console.warn(\"task not found in the state\");\n      return;\n    }\n\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...domainModel,\n    };\n\n    todolistsAPI\n      .updateTask(todolistId, taskId, apiModel)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          const action = updateTaskAC({\n            taskId: taskId,\n            model: domainModel,\n            todolistId: todolistId,\n          });\n          dispatch(action);\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((error) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeTodolistFilterAC,\n  FilterValuesType,\n} from \"../../store/todolist-reducer/todolists-reducer\";\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\nimport { Todolist } from \"./Todolist/Todolist\";\nimport { Redirect } from \"react-router-dom\";\nimport { TaskStatuses } from \"../../api/types\";\nimport { selectIsLoggedIn } from \"../../store/auth-reducer/selectors\";\nimport { selectTasks } from \"../../store/tasks-reducer/selectors\";\nimport { selectTodolists } from \"../../store/todolist-reducer/selectors\";\nimport { Container } from \"./styles\";\nimport {\n  addTaskTC,\n  removeTaskTC,\n  updateTaskTC,\n} from \"../../store/tasks-reducer/thunks\";\nimport {\n  addTodolistTC,\n  changeTodolistTitleTC,\n  fetchTodolistsTC,\n  removeTodolistTC,\n} from \"../../store/todolist-reducer/thunks\";\n\nexport const TodolistsList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const todolists = useSelector(selectTodolists);\n  const tasks = useSelector(selectTasks);\n\n  const removeTask = (id: string, todolistId: string) => {\n    const thunk = removeTaskTC(id, todolistId);\n    dispatch(thunk);\n  };\n\n  const addTask = (title: string, todolistId: string) => {\n    const thunk = addTaskTC(title, todolistId);\n    dispatch(thunk);\n  };\n\n  const changeStatus = (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => {\n    const thunk = updateTaskTC(id, { status }, todolistId);\n    dispatch(thunk);\n  };\n\n  const changeTaskTitle = (\n    id: string,\n    newTitle: string,\n    todolistId: string\n  ) => {\n    const thunk = updateTaskTC(id, { title: newTitle }, todolistId);\n    dispatch(thunk);\n  };\n\n  const changeFilter = (value: FilterValuesType, todolistId: string) => {\n    const action = changeTodolistFilterAC({ id: todolistId, filter: value });\n    dispatch(action);\n  };\n\n  const removeTodolist = (id: string) => {\n    const thunk = removeTodolistTC(id);\n    dispatch(thunk);\n  };\n\n  const changeTodolistTitle = (id: string, title: string) => {\n    const thunk = changeTodolistTitleTC(id, title);\n    dispatch(thunk);\n  };\n\n  const addTodolist = (title: string) => {\n    const thunk = addTodolistTC(title);\n    dispatch(thunk);\n  };\n\n  useEffect(() => {\n    const thunk = fetchTodolistsTC();\n    dispatch(thunk);\n  }, []);\n\n  if (!isLoggedIn) {\n    return <Redirect to={\"/login\"} />;\n  }\n\n  return (\n    <>\n      <AddItemForm addItem={addTodolist} />\n      <Container>\n        {todolists.map((tl) => {\n          let allTodolistTasks = tasks[tl.id];\n\n          return (\n            <Todolist\n              key={tl.id}\n              todolist={tl}\n              tasks={allTodolistTasks}\n              removeTask={removeTask}\n              changeFilter={changeFilter}\n              addTask={addTask}\n              changeTaskStatus={changeStatus}\n              removeTodolist={removeTodolist}\n              changeTaskTitle={changeTaskTitle}\n              changeTodolistTitle={changeTodolistTitle}\n            />\n          );\n        })}\n      </Container>\n    </>\n  );\n};\n","import { Dispatch } from \"redux\";\nimport { setAppStatusAC } from \"../app-reducer/app-reducer\";\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\nimport { todolistsAPI } from \"../../api/todolists-api\";\nimport {\n  addTodolistAC,\n  changeTodolistEntityStatusAC,\n  changeTodolistTitleAC,\n  removeTodolistAC,\n  setTodolistsAC,\n} from \"./todolists-reducer\";\n\nexport const fetchTodolistsTC = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: \"loading\" }));\n    todolistsAPI\n      .getTodolists()\n      .then((res) => {\n        dispatch(setTodolistsAC({ todolists: res.data }));\n        dispatch(setAppStatusAC({ status: \"succeeded\" }));\n      })\n      .catch((error) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n};\n\nexport const removeTodolistTC = (todolistId: string) => {\n  return (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: \"loading\" }));\n    dispatch(\n      changeTodolistEntityStatusAC({ id: todolistId, status: \"loading\" })\n    );\n    todolistsAPI.deleteTodolist(todolistId).then((res) => {\n      dispatch(removeTodolistAC({ id: todolistId }));\n      dispatch(setAppStatusAC({ status: \"succeeded\" }));\n    });\n  };\n};\n\nexport const addTodolistTC = (title: string) => {\n  return (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: \"loading\" }));\n    todolistsAPI.createTodolist(title).then((res) => {\n      dispatch(addTodolistAC({ todolist: res.data.data.item }));\n      dispatch(setAppStatusAC({ status: \"succeeded\" }));\n    });\n  };\n};\n\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n  return (dispatch: Dispatch) => {\n    todolistsAPI.updateTodolist(id, title).then((res) => {\n      dispatch(changeTodolistTitleAC({ id: id, title: title }));\n    });\n  };\n};\n","import { AppRootStateType } from \"../store\";\n\nexport const selectIsInitialized = (state: AppRootStateType) => {\n  return state.app.isInitialized;\n};\n\nexport const selectStatus = (state: AppRootStateType) => {\n  return state.app.status;\n};\n\nexport const selectErrod = (state: AppRootStateType) => {\n  return state.app.error;\n};\n","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAppErrorAC } from \"../../store/app-reducer/app-reducer\";\nimport { selectErrod } from \"../../store/app-reducer/selectors\";\n\nexport const ErrorSnackbar = () => {\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectErrod);\n\n  const isOpen = error !== null;\n\n  const handleClose = (_: SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC({ error: null }));\n  };\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert\n        elevation={6}\n        variant=\"filled\"\n        severity=\"error\"\n        onClose={handleClose}\n      >\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Text = styled.p`\n  color: #2e3b55;\n`;\n","import { apiConfig } from \"./api-config\";\n\nimport { LoginParams, ResponseType } from \"./types\";\n\nexport const authAPI = {\n  login(data: LoginParams) {\n    const promise = apiConfig.post<ResponseType<{ userId?: number }>>(\n      \"auth/login\",\n      data\n    );\n    return promise;\n  },\n  logout() {\n    const promise =\n      apiConfig.delete<ResponseType<{ userId?: number }>>(\"auth/login\");\n    return promise;\n  },\n  me() {\n    const promise =\n      apiConfig.get<ResponseType<{ id: number; email: string; login: string }>>(\n        \"auth/me\"\n      );\n    return promise;\n  },\n};\n","import React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  TextField,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\nimport { Form } from \"./styles\";\nimport { selectIsLoggedIn } from \"../../store/auth-reducer/selectors\";\nimport { loginTC } from \"../../store/auth-reducer/thunks\";\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const formik = useFormik({\n    validate: (values) => {\n      if (!values.email) {\n        return {\n          email: \"Email is required\",\n        };\n      }\n      if (!values.password) {\n        return {\n          password: \"Password is required\",\n        };\n      }\n    },\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    onSubmit: (values) => {\n      dispatch(loginTC(values));\n    },\n  });\n\n  const emailError = formik.errors.email ? (\n    <div>{formik.errors.email}</div>\n  ) : null;\n\n  const passwordError = formik.errors.password ? (\n    <div>{formik.errors.password}</div>\n  ) : null;\n\n  if (isLoggedIn) {\n    return <Redirect to={\"/\"} />;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item>\n        <Form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              {/* <p>\n                To log in get registered{\" \"}\n                <a\n                  href={\"https://social-network.samuraijs.com/\"}\n                  target={\"_blank\"}\n                >\n                  here\n                </a>\n              </p> */}\n              <p style={{ color: \"#2E3B55\" }}>\n                You can use test account credentials\n              </p>\n              <p>\n                <span style={{ color: \"#2E3B55\" }}> Email: </span>\n                free@samuraijs.com\n              </p>\n              <p>\n                <span style={{ color: \"#2E3B55\" }}>Password: </span>free\n              </p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"email\")}\n              />\n              {emailError}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"password\")}\n              />\n              {passwordError}\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={\n                  <Checkbox\n                    {...formik.getFieldProps(\"rememberMe\")}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n              />\n              <Button\n                type={\"submit\"}\n                variant={\"contained\"}\n                style={{ background: \"#2E3B55\", color: \"#fff\" }}\n              >\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </Form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Dispatch } from \"redux\";\n\nimport { setIsLoggedInAC } from \"../auth-reducer/auth-reducer\";\n\nimport { authAPI } from \"../../api/login-api\";\nimport { LoginParams } from \"../../api/types\";\nimport { setAppStatusAC } from \"../app-reducer/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\nexport const loginTC = (data: LoginParams) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({ status: \"loading\" }));\n  authAPI\n    .login(data)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC({ value: true }));\n        dispatch(setAppStatusAC({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({ status: \"loading\" }));\n  authAPI\n    .logout()\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC({ value: false }));\n        dispatch(setAppStatusAC({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import styled from \"styled-components\";\nimport { media } from \"../utils/theme\";\n\nexport const Wrapper = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  background-color: #f9f9fa;\n`;\n\nexport const Content = styled.div`\n  padding: 40px 100px;\n\n  ${media.tablet`\n    padding: 40px 40px;\n  `}\n\n  ${media.phone`\n    padding: 40px 20px;\n  `}\n`;\n","import React, { FC } from \"react\";\n\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport styled from \"styled-components\";\n\nconst LoaderWrapper = styled.div`\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Loader: FC = () => {\n  return (\n    <LoaderWrapper>\n      <CircularProgress />\n    </LoaderWrapper>\n  );\n};\n","import { Toolbar } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  background-color: #f9f9fa;\n`;\n\nexport const StyledToolbar = styled(Toolbar)`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Content = styled.div`\n  padding: 40px 100px;\n`;\n","import React, { FC } from \"react\";\n\nimport {\n  AppBar as MaterialAppBar,\n  Button,\n  LinearProgress,\n  Typography,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { StyledToolbar } from \"./styles\";\nimport { selectStatus } from \"../../store/app-reducer/selectors\";\nimport { selectIsLoggedIn } from \"../../store/auth-reducer/selectors\";\nimport { logoutTC } from \"../../store/auth-reducer/thunks\";\n\nexport const AppBar: FC = () => {\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const status = useSelector(selectStatus);\n\n  return (\n    <MaterialAppBar position=\"static\" style={{ background: \"#2E3B55\" }}>\n      <StyledToolbar>\n        <Typography variant=\"h6\">Todolist</Typography>\n        {isLoggedIn && (\n          <Button color=\"inherit\" onClick={() => dispatch(logoutTC())}>\n            Log out\n          </Button>\n        )}\n      </StyledToolbar>\n      {status === \"loading\" && <LinearProgress />}\n    </MaterialAppBar>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\n\nimport { TodolistsList } from \"../containers/TodolistsList/TodolistsList\";\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Route } from \"react-router-dom\";\nimport { Login } from \"../containers/Login/Login\";\n\nimport { Content, Wrapper } from \"./styles\";\n\nimport { Loader } from \"../components/Loader/Loader\";\nimport { AppBar } from \"../containers/AppBar/AppBar\";\nimport { selectIsInitialized } from \"../store/app-reducer/selectors\";\nimport { initializeAppTC } from \"../store/app-reducer/thunks\";\n\nexport const App: FC = () => {\n  const dispatch = useDispatch();\n\n  const isInitialized = useSelector(selectIsInitialized);\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n\n  return !isInitialized ? (\n    <Loader />\n  ) : (\n    <Wrapper>\n      <ErrorSnackbar />\n      <AppBar />\n      <Content>\n        <Route path={\"/login\"} render={() => <Login />} />\n        <Route exact path={\"/\"} render={() => <TodolistsList />} />\n      </Content>\n    </Wrapper>\n  );\n};\n","import { Dispatch } from \"redux\";\n\nimport { setIsLoggedInAC } from \"../auth-reducer/auth-reducer\";\n\nimport { authAPI } from \"../../api/login-api\";\nimport { setAppInitializedAC } from \"./app-reducer\";\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI.me().then((res) => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({ value: true }));\n    } else {\n    }\n    dispatch(setAppInitializedAC({ isInitialized: true }));\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { App } from \"./app/App\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./utils/theme\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}