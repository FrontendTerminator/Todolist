{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","authentificationSelector","auth","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","createAsyncThunk","thunkAPI","then","res","tasks","items","removeTaskAC","t","addTaskAC","task","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","background","App","logoutHandler","AppBar","position","Toolbar","toolbar","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0e19e05a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'e68751ec-99e4-4ba5-aeca-d3d2975884b0'\n    }\n}\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    ...settings\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        const promise = instance.get<TodolistType[]>('todo-lists');\n        return promise;\n    },\n    createTodolist(title: string) {\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\n        return promise;\n    },\n    deleteTodolist(id: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\n        return promise;\n    },\n    updateTodolist(id: string, title: string) {\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n        return promise;\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\n        return promise;\n    },\n    logout() {\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\n        return promise;\n    },\n    me() {\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\n       return promise\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\nimport {ResponseType} from '../api/todolists-api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {AppRootStateType} from \"../../app/store\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: false}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const authentificationSelector = (state: AppRootStateType) => {\n    return state.auth.isLoggedIn\n}","import {Dispatch} from 'redux'\nimport {authAPI} from '../api/todolists-api'\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\n            state.isInitialized = action.payload.isInitialized\n        }\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\n    isInitialized: boolean\n}\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        } else {\n\n        }\n        dispatch(setAppInitializedAC({isInitialized: true}));\n    })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleServerNetworkError} from '../../utils/error-utils'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: Array<TodolistDomainType> = []\n\nconst slice = createSlice({\n    name: 'todolists',\n    initialState: initialState,\n    reducers: {\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n            //state.filter(tl => tl.id != action.payload.id)\n        },\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].title = action.payload.title\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].filter = action.payload.filter\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.status\n        },\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        }\n    }\n})\n\n// export const _todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n//     switch (action.type) {\n//         case 'REMOVE-TODOLIST':\n//             return state.filter(tl => tl.id != action.id)\n//         case 'ADD-TODOLIST':\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n//         case 'CHANGE-TODOLIST-TITLE':\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n//         case 'CHANGE-TODOLIST-FILTER':\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n//         case 'SET-TODOLISTS':\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n//         default:\n//             return state\n//     }\n// }\n\nexport const todolistsReducer = slice.reducer\n\nexport const {\n    removeTodolistAC,\n    addTodolistAC,\n    changeTodolistTitleAC,\n    changeTodolistFilterAC,\n    changeTodolistEntityStatusAC,\n    setTodolistsAC\n} = slice.actions\n\n\n// actions\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\n//     type: 'CHANGE-TODOLIST-TITLE',\n//     id,\n//     title\n// } as const)\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n//     type: 'CHANGE-TODOLIST-FILTER',\n//     id,\n//     filter\n// } as const)\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC({todolists: res.data}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatusAC({status: 'loading'}))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC({id: todolistId}))\n                //скажем глобально приложению, что асинхронная операция завершена\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}","import {\n    addTodolistAC,\n    removeTodolistAC,\n    setTodolistsAC\n} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: TasksStateType = {}\n\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasksTC', (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n    return todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            //thunkAPI.dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\n            return {tasks, todolistId}\n        })\n})\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState: initialState,\n    reducers: {\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) tasks.splice(index, 1)\n        },\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n            state[action.payload.task.todoListId].unshift(action.payload.task)\n        },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) tasks[index] = {...tasks[index], ...action.payload.model}\n        },\n        /*setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\n            state[action.payload.todolistId] = (action.payload.tasks)\n        }*/\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = []\n        })\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.id]\n        })\n        builder.addCase(setTodolistsAC, (state, action) => {\n            action.payload.todolists.forEach((tl: any) => {\n                state[tl.id] = []\n            })\n        })\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\n            state[action.payload.todolistId] = (action.payload.tasks)\n        })\n    }\n})\n\nexport const tasksReducer = slice.reducer\n\n// actions\nexport const {removeTaskAC, addTaskAC, updateTaskAC, /*setTasksAC*/} = slice.actions\n\n// thunks\n/*export const fetchTasksTC_ = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}*/\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            const action = removeTaskAC({taskId: taskId, todolistId: todolistId})\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                const action = addTaskAC({task: task})\n                dispatch(action)\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\n    console.log(\"AddItemForm called\")\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== \"\") {\n            addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log(\"EditableSpan called\");\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n\n        const thunk = fetchTasksTC(props.todolist.id)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props.addTask, props.todolist.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title)\n    }, [props.todolist.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\n\n    let tasksForTodolist = props.tasks\n\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport { Redirect } from 'react-router-dom'\n\nexport const TodolistsList: React.FC = () => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC(id, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\n        dispatch(action)\n    }, [])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"} />\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                todolist={tl}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC} from '../../app/app-reducer'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    //const [open, setOpen] = React.useState(true)\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC({error: null}));\n    }\n\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from 'formik'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {authentificationSelector, loginTC} from './auth-reducer'\nimport {AppRootStateType} from '../../app/store'\nimport {Redirect} from 'react-router-dom'\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n\n    /*const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);*/\n    const isLoggedIn = useSelector(authentificationSelector);\n\n    const formik = useFormik({\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'Email is required'\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'Password is required'\n                }\n            }\n\n        },\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={\"/\"}/>\n    }\n\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        {/*<p>\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\n                                                        target={'_blank'}>here</a>\n                        </p>*/}\n                        <p style={{color: '#2E3B55'}}>You can use test account credentials</p>\n                        <p><span style={{color: '#2E3B55'}}> Email: </span>free@samuraijs.com</p>\n                        <p><span  style={{color: '#2E3B55'}}>Password: </span>free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                                checked={formik.values.rememberMe}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'}\n                                style={{background: '#2E3B55', color: '#fff'}}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n           {/* <p style={{color: '#2E3B55'}}>Warning: The server may be temporarily overloaded. If you are unable to download the data, then try again.</p>*/}\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react'\nimport style from './App.module.css'\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from '@material-ui/core'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\nimport {HashRouter, Route} from 'react-router-dom'\nimport {Login} from '../features/Login/Login'\nimport {logoutTC} from '../features/Login/auth-reducer'\n\nfunction App() {\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <ErrorSnackbar/>\n                <AppBar position=\"static\" style={{background: '#2E3B55'}}>\n                    <Toolbar className={style.toolbar}>\n                        {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>*/}\n                        <Typography variant=\"h6\">\n                            Todolist\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler} >Log out</Button>}\n                    </Toolbar>\n                    {status === 'loading' && <LinearProgress/>}\n                </AppBar>\n                <Container fixed>\n                    <Route exact path={'/'} render={() => <TodolistsList  />}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n                </Container>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default App\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from '../features/Login/auth-reducer'\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)//.concat(logger)\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"App_toolbar__1c24n\"};"],"sourceRoot":""}